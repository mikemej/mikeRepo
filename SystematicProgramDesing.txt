Introduction to Systematic Program Design Part1

Set Language   Beginning-Intermediate

Math Expressions:
To comment use a ";"
(+ 3 3) ;produce the add of 3 plus 3
(+ 2 (* 3 2))
(sqr 3)   ; squares the number
(sqrt 16) ; produce squares root of the the number

#;Problem 1:
Assume that the two short sides of a right triangle have length 3 and 4.
What is the length of the long side? Recall tat the Pythagorean Theorem tells us that:
C= sqrt(a^2 +b^2)

;Pythagorean Theorem

(define A  3)
(define B  4)
(define C  (sqrt (+ (sqr a) (sqr b) ) ) )


Evaluation of thE expression
to evaluate primitive call:
    -first reduce operands to values then apply primitive to the values
    
Intuitively:
    left to right
    inside to outside
    
(+ 2 (* 3 4) (- (+ 1 2) 3))  
(+ 2 12 (- 3 3))
(+ 2 12 0)
14


Strings:
    " Hello world!!!!!              "
  dQ  Any character !dQ           dQ  
  
  
"apple"
"ada"

(string-append "Ada" "Lovelace") ;string-append concatenates the strings
AdaLovelace
(string-append "Ada" " " "Lovelace")
Ada Lovelace

(string-length "apple") ; produce the number of the length of the string = 5

(substring "caribou" 2 4) ; return the letters between the position 2 to 4 = "ri"

0 based indexing, means that every index start at 0 012345...
(substring "0123456789" 2 4) ;23

Images:

The must important thing when use an image, is to make the require call
(require htdp/image)

(circle 10 "solid" "red") ; first argument rad, second "solid or outline" third color

(rectangle 20 10 "outline" "blue") ; sideA, sideB, "solid or outline" and color
(text "hello" 24 "color") ; text fontsize & color

Above/Beside/overlay:
This function change the order of the images

(above (circle 10 "solid" "red")
       (circle 20 "solid" "red")
       (circle 30 "solid" "red")) ; produce a stack of circles

(beside (circle 10 "solid" "red")
       (circle 20 "solid" "red")
       (circle 30 "solid" "red")) ; produce a side by side of circles
       
(overlay (circle 10 "solid" "red")
       (circle 20 "solid" "red")
       (circle 30 "solid" "red")) ; produce a circles one on top of each other

       
Constants Definitions:

Define is the reserved word used to set a variable or constants
( define <name> <expression> )

example:

(require 2htdp/image)

(define WIDTH 400)
(define HEIGHT 600)
(define CAT (text "CAT" 40 "blue"))
(define RCAT (rotate -10 CAT))
(define LCAT (rotate 10 CAT))


Functions Definitions:
-To evaluate primitive call
    -first reduce operands to values (args)
    -then apply primitive to the values
-For function definitions
    -Simply record definition
-To evaluate function call
    -first reduce operands to values(args)
    -replace function call by
        -body of function in which every occurrence of parameters are replaced by corresponding argument
        
Given: f(x) = 2*x ; X parameters stands for varying value == 2* is the unchanging part of the function

f(2) = 2*2 = 4
f(4) = 2*4 = 8

(define (<function name> <parameters>)
    < expressions >
    < expressions >)
to call a function
(<name-of-function> <parameters>) 
Example:
;;Functions design (variable part and unchanging part)
(require 2htdp/image)

(above (circle 40 "solid" "red")
         (circle 40 "solid" "yellow")
         (circle 40 "solid" "green"))
     
(define (cirColor c)
    (circle 40 "solid" c))
 
(cirColor "red")

(above (cirColor "red")
       (cirColor "yellow")
       (cirColor "green))

Boolean:
Boolean have 2 values:  True/False

(> 10 20)
(>= 10 10)

(string=? "foo" "foo")

(define I1 (rectangle 10 20 "solid" "red"))
(define I1 (rectangle 20 10 "solid" "red"))

(< (image-width I1)
   (image-width I2))
   
   
Statements IF

To evaluate an if expression:

    -if the question expression is not a value evaluate it, and replace with value
    -if the question is true replace entire if expression with true answer expression
    -if the question is false replace entire if expression with false answer expression
    -the question is a value other than true or false so produce an error
(if <? expression>
    <True answer expression>
    <false answer expression>)
    
    
    EXAMPLE
(if (= 10 10)
    (circle 10 "solid" "red")
    (circle 10 "outline" "blue"))
    
(if (> 10 10)
    (circle 10 "solid" "red")
    (circle 10 "outline" "blue"))
    
(if (string=? "foo" "foo")
    "Iguales"
    "diferentes")
    
    
Statement AND

To form an and expression:

(and <expression1> <expression2>)

To evaluate an AND expression:
evaluate <expression> one at a time:
    -if an <expression> produce false immediately produce false
    -if all <expr> produce true so produce true
(and (= 10 10)
     (= 10 11))
     
Statement OR

To form an OR expression:

(OR <expression1> <expression2>)

To evaluate an OR expression:
evaluate <expression> one at a time:
    -if an <expression> produce false continues with the next,
    -if one of then <expr> produce true, so produce true
(and (= 10 10)
     (= 10 11))
     
     
Stepper
The stepper function helps to how the evaluation of the expression produce a value step by step.
It is a plug in integrated on the DrRacket software.


Practice:


Problem 
**Write the BSL expression that represents the arithmetic expression (7 - 2) * 4 which equals 20
;Resolve
;(= (* (- 7 2) 4) 20)


**Based on the 2 constants provided, write expressions to prove if:

1) IMAGE1 is taller than IMAGE2
2) IMAGE1 is narrower that IMAGE2
3) IMAGE1 is the same as IMAGE2

(define IMAGE1 (rectangle 10 15 "solid" "red"))
(define IMAGE2 (rectangle 15 10 "solid" "red"))
(image-height IMAGE1)
(image-width IMAGE1)
(image=? IMAGE1 IMAGE2)

(< (image-height IMAGE1) (image-width IMAGE)

**Write out the step-by-step evaluation for the following expresion:

(+ (* 2 3) (/ 8 2))
(+ 6 4)
10


**Write out the step-by-step evaluation for the following expression:

(* (string-length "foo") 2) f(0) o(1) o(2)= 3 positions index
(* 3 2)
6


**Given the following function definition:

(define (farfle s)
    (string-append s s))
    
Write out the step-by-step evaluation of the expression:

(farfle (substring "abcdef" 0 2)) a(0) b (1) c (2) d (3) e(4) f(5)

(farfle "ab")
"abab"

**Given the following function definition:

(define (foo s)
    (if (string=? (string-ith s 0) "a")
        (string-append s "a")
        s))

Write out the step-by-step evaluation of the expression:


DESIGN RECIPES

    -How to design functions:
    (HtDF) recipe is a design method that enables systematic design functions. We will use this recipe throughout the term, although we will enhance it as we go to solves more complex problems.
    
    THe HtDF recipe consists of the following steps:
        1. Signature, purpose and stub.
            Write the function signature, a one-line purpose statement and a function stub.
            A signature has the type of each argument, separated by spaces, followed by ->, followed by the type of result. So a function that consumes an image and produces a number would have the signature Image -> Number.
            
            Note that the stub is a syntactically complete function definition that produces a value of the right type. If the type is Number its common to use 0, if the type is String it is common to use "a" and so on. The value will not, in general, match the purpose statement. In the example below the stub produces 0, which is number, but only matches the purpose when double happens to be called with 0. 
            Example:
            ;; Number -> Number
            ;; produces n times 2
            
            (define (double n) 0) ; this is the stub
            
            (define (double n)
                (* 2 n))
            
            The purpose of the stub is to serve as a kind of scaffolding to make it possible to run the examples even before the function design is complete. With the stub in place check-expects that call the function can run. Most of them will fail of course, but the fact that they can run at all allows you to ensure that they are at least well-formed: parentheses are balanced, function calls have the proper number of arguments, function and constant names are correct and so on. This is very important, the sooner you find a mistake -- even a simple one -- the easier it is to fix.
        
        2. Define examples, wrap each in check-expect.
            Write at least one example of a call the function and the expected result the call should produce.
            You will often need more examples, to help you better understand the function or to properly test the function.(If once your function works and you run the program some of code is highlighted in black it means you definitely do not have enough examples.) If you are unsure how to start writing examples use the combination of the function signature and the data definition(s) to help you generate examples. Often the example data from the data definition is useful, but it does not necessarily cover all the important cases for a particular function.
            
            The first role of an example is to help you understand what the function is supposed to do. If there are boundary conditions be sure to include an example of them. If there are different behaviours the function should have, include an example of each. Since they are examples first, you could write them in this form:
            
            ;;(double 0) should produce 0 (* 0 2)
            ;;(double 1) should produce 2 (* 1 2)
            ;;(double 2) should produce 4 (* 2 2)
            
            So, While the above form satisfies our need for examples, DrRacket gives us a better way to write them, by enclosing them in check-expect. This will allow DrRacket to check them automatically when the function is complete.( In technical terms it will turn the examples into unit test.)
            
            ;; Number -> Number
            ;; produces n times 2
            (check-expect (double 0) (* 0 2))
            (check-expect (double 1) (* 1 2))
            (check-expect (double 3) (* 3 2))
            
            (define (double n) 0) ;this is the stub
            
        3. Template and Inventory
            Before coding the function body it is helpful yo have a clear sense of what the function ha to work with -- what is the contents of your bag of parts for coding this function? the template provides this.
            The templates are related to How to Design Data Definitions (HtDD), you should copy the template form the data definition to the function design, rename the template, and write a comment that says where the template was copied from. Note that the template is copied form the data definition for the consume type, not the produce type.
            
            ---- Data Driven Templates: ----
                
                Templates are the core structure that we know a functions must have, independent of the details of its definition. In mane cases the template for a function is determined by the type of date the function consumes. We refer to these as data driven templates. The recipe below can be used to produce a data driven template for any type comment.
                
                For a given type TypeName the data driven template is:
                
                (define (fn-for-type-name x)
                    <body>)
                
                Where x is an appropriately chosen parameter name(often the initials of the type name) and the body is determined according to the table below. To us the table, start with the type of the parameter, i.e. TypeName, and select the row of the table that matches that type. The first row matches only primitive types, tha later rows match parts of type comments.
                
                
                Type of Data                        cond Question(if applicable)            Body or cond answer(if aplicable)
                
                Atomic Non-Distinct                 Appropriate predicate                   Expression that operates on the parameter
                ----------------------------------------------------------------------------------------------------------------------
                
                -Number                             -(number? x)                            (... x)
                -String                             -(string? x)                            
                -Boolean                            -(boolean? x)
                -Image                              -(image? x)
                -interval like number [0, 10]       -(and (<= 0 x) (< x 10))                
                -etc                                -etc
                
                Atomic Distinct Value               Appropriate predicate             Since value is distinct, parameter doesn't appear
                ----------------------------------------------------------------------------------------------------------------------
                
                -"red"                              -(string=? x "red")                     (...)
                -false                              -(false? x)
                -empty                              -(empty? x)
                -etc.                               -etc.
                
                one of                                                                  Cond with one clause per sublcase of one of.
                -----------------------------------------------------------------------------------------------------------------------
                
                -enumeration                                                            (cond [<q1> <answ1>] [<q2> <answ2>])         -itemizations                                                                                                                                                                                     Where each question and answer expression is
                                                                                        formed by the following the rule in the question
                                                                                        or answer column of this table for the corresponding case. A detailed derivation of a template for a one-of type appears below.
                                                                                        It is permissible to use else for the last question for itemizations and large enumerations. Normal enumerations should not use else.
                                                                                        Note that in a mixed data itemization, such as
                                                                                        ;; Measurement is one of:
                                                                                        ;; - Number [-10, 0)
                                                                                        ;; - true
                                                                                        ;; - Number (0, 10]
                                                                                        the cond question must be guarded with an appropriate type predicate. In particular, the first cond question for Measurement must be
                                                                                        
                                                                                        (and (number? m)
                                                                                            (<= -10 m)
                                                                                            (< m 0))
                                                                                        Where the call to number? guards the calls to <= and <. This will protect <= < form ever receiving true as an argument
                
                Compound                            Predicate from structure            All selectors
                -----------------------------------------------------------------------------------------------------------------------
                
                -Position                           -(posn? x)                          -(... (posn-x x) (posn-y x))
                -Firework                           -(firework? x)                      -(... (firework-y x) (firework-color x))
                -Ball                               -(ball? x)                          -(... (ball-x x) (ball-dx x))
                -cons                               -(cons? x) (often just else)        -(... (first x) (rest x))
                -etc.                               -etc.                               -etc.
                                                                                        The consider the result type of each selector call
                                                                                        and wrap the accessor expression appropriately using the table with that type.
                                                                                        So for example, if after adding all the selectors you have:
                                                                                        (... (game-ball g) ; produces Ball
                                                                                            (game-paddle g)) ; produces Paddle
                                                                                            
                
                Other Non-Primitive type Reference  Predicate, usually from structure   Call to other type's template function
                                                    definition
                -----------------------------------------------------------------------------------------------------------------------
                
                                                    -(firework? x)                      (fn-for-firework x)
                                                    -(person? x)                        (fn-for-person x)
               
                Self Reference                                                          From natural recursion with call to this type's
                                                                                        template function:  
                -----------------------------------------------------------------------------------------------------------------------
                
                                                                                        -(fn-for-los (rest los))
                                                                                        
                Mutual Reference                                                        all to other type's template function:
                -----------------------------------------------------------------------------------------------------------------------
                
                Note: form and group all templates in mutual                           (fn-for-lod (dir-subdirs d)
                reference cycle together.                                                 (fn-for-dir (first lod)))
                
                
                Producing the Template for an Example One of Type
                In many cases than one of the above rules will apply to a single template. Consider this type comment:
                
                ;; Clock is one of:
                ;; - Natural
                ;; - false
                
                and the step-by-step construction of the template for a function operating on clock
                
                (define (fn-for-clock c)                Clock is a one of type with two subclasses (one of which is not distinct making 
                    (cond [Q A]                         it an itemization). the one of rule tells us to use a cond. The cond needs one
                          [Q A]))                       clause for each subclass of the itemization.
                          
                ;; Template rules used:
                ;; -one of: 2 cases
                -----------------------------------------------------------------------------------------------------------------------
                
                (define (fn-for-clock c)                The cond questions need to identify each subclass of data. The cond answers need
                    (cond [(number? c) (... c)]         to follow templating rules for that subclasses, Natural is a non-distinct type;
                          [Q A]))                       the atomic non-distinct rule us the question and answer as shown to the left.
                
                ;; Template rules used:
                ;; - one of: 2 cases
                ;; - atomic non-distinct: Natural
                -----------------------------------------------------------------------------------------------------------------------
                
                (define (fn-for-clock c)                In the second case false is an atomic distinct type, so the atomic-distinct rule
                    (cond [(number? c) (... c)          gives us the question and answer. Since the second case is also the last case we
                        [else                           can use else for the question.
                            (...)]))
                            
                ;; Template rules used:
                ;; - one of: 2 cases
                ;; - atomic non-distinct: Natural
                ;; - atomic distinct: false
                
                
                Templates for Mutually Referential Types
                The previous example doesn't cover the mutual-reference rule(), which says that in case of mutually self-reference data definitions, when you template one function in the self-reference cycle you should immediately template all the functions in the self-reference cycle, So, for example, given:
                
                (define-struct person (name subs))
                ;; person is (make-person String ListofPerson)
                
                ;; ListOfPerson is one of:
                ;; -empty
                ;; - (cons Person ListOfPerson)
                
                Then if you need a template for a function operating on a person (or a function operating on a ListOfPerson) you should immediately write a template for both functions, resulting in something like this:
                
                #;
                (define (fn-for-person p)
                    (... (person-name p)
                        (fn-for-lop (person-subs p)))) ;mutual recursion form mutual-reference
                        
                #;
                (define (fn-for-lop lop)
                    (cond [(empty? lop) ...]
                        [else 
                            (... (fn-for-person (first lop)) ;mutual recursion from mutual-reference
                                (fn-for-lop (rest lop)))]))  ;natural recursion from self-reference
                
                Note that producing that template will also involve using atomic-distinct, atomic, one-of and compound rules.
                
                As with self-reference, its a good idea to draw a mutual-reference line on the date definition and ensure you have corresponding mutual recursion line in your templates.
                
                TESTING 
                The principles above can also be used to understand how many tests a data definitions implies. Simply put, the set of test/examples should cover all cases, call all helper functions, involve all selectors, and avoid duplicated values.
                
                Additional Design Rules for Helpers
                
                During coding three additional guidelines suggest situations under which a helper function should be added.
                
                1. Use a separate function for each difference between quantities in a problem.
                2. If a subtask requires operating on arbitrary sized data a helper function must be used.
                3. If a subtask involves special domain knowledge a helper function should be used.
                4. in addition always keep the "one task per function" goal in mind.If part of a function you are designing seems to be a well-defined subtask put that into a helper function.
                
            For primitive data like numbers, strings and images the body of the template is simply (... x)
            Where x is the name of the parameter to the function.
                
            Once the template is done the stub should be commented out.
                
            ;; Number -> Number
            ;; produces n times 2
            (check-expect (double 0) (* 0 2))
            (check-expect (double 1) (* 1 2))
            (check-expect (double 3) (* 3 2))
            
            ;(define (double n) 0) ; this is the stub
            
            (define (double n) ; this is the template
                (... n))
                
            It is also often useful to add constant values which are extremely likely to be useful to the template body at this point. For example, the template for a function that renders the state of a world program might have an MTS constant added to its body. This causes the template to include an inventory of useful constant.
            
        4. Code the function body
            
            Now complete the function body by filling in the template.
            
            Note that:
            
                -the signature tells you the type of the parameter(s) and the type of the data the function body must produce.
                -the purpose describes what the function body must produce in English
                -the examples provide several concrete examples of what the function body must produce.
                -the template tells you the raw material you have to work with
                
            You should use all of the above to help you code the function body. In some cases further rewriting of examples might make it more clear how you computed certain values, and that make it easier to code the function.
            
            ;; Number -> Number
            ;; produce n times 2
            (check-expect (double 0) (* 0 2))
            (check-expect (double 1) (* 1 2))
            (check-expect (double 3) (* 3 2))
            
            ;(define (double n) 0) ; this is the stub
            
            ;(define (double n) ; this is the template
                (... n))
                
            (define (double n)  ; this is the body of the function
                (* n 2))
                
        5. Test and debug until correct
        
            Run the program and make sure all the tests pass, if not debug until they do. Many of the problems you might have had will already have been fixed because of following the "run early, run often" approach,. But if not, debug until everything works.

    

Practice design functions:
---------------------------------------------------------------------------

*******************
;;Design a function called yell that consumes strings like "hello" and adds "!" to produce the string like "Hello!".

;; String -> String ; Signature
;; The program consumes a string and add a "!" character at the end. ; purpose

(check-expect (yell "hi") "hi!")
(check-expect (yell "hello") "hello!")
(check-expect (yell "good morning") "good morning!")

;(define (yell s) "a") ; this is the stub

#;(define (yell s)
  (... s))

(define (yell s)
  (string-append s "!"))   


***************************
;;Desing a function called area that consumes the length of one side of the square and produces the area of the square.

;; Number  -> Number  : Signature
;; Produce the area with the given side of the square. : Purpose

(check-expect (area 3) 9)
(check-expect (area 4) 16)
(check-expect (area 5) 25)

;(define (area x) 0) ; Stub
#;(define (area x)
  (... X))

(define (area x)
  (sqr x))


********************
(require 2htdp/image)

;;Design a function that consumes an image and produce the area of the image.

;; Image -> Number
;; Produce the images area from the width and heigh.

(check-expect (image-area (rectangle 2 3 "solid" "blue")) 6)
(check-expect (image-area (rectangle 5 3 "solid" "blue")) 15)

;;(define (image-area img) 0)
#;(define (image-area img)
  (... imag))
(define (image-area img)
  (* (image-width img) (image-height img)))

***********************
(require 2htdp/image)

;;Design a function that consumes an image and determines whether the image is tall.

;; Image ->  Boolean
;; Produce true if heigh of the image is greather than width, otherwise produce false.

;;(define (tall? ima) false)    -> Stub

(check-expect (tall? (rectangle 4 5 "solid" "white")) true)
(check-expect (tall? (rectangle 8 5 "solid" "white")) false)
(check-expect (tall? (rectangle 5 5 "solid" "white")) false)


#;(define (tall? img)  -> Template
  (if (... img)
      (... img)
      (... img)))

(define (tall? img)
  (> (image-height img) (image-width img)))
edefine Ima1 (rectangle 10 8 "solid" "white"))
Ima1
(image-area Ima1)



***********************
(require 2htdp/image)

;;Design a function that consumes an image and determines if the image is tall, wide or a square.

;; Image ->  String
;; Produce the shape of the image, on of "tall", "wide" or "square"

;;(define (image-shape? ima) " ")    -> Stub

(check-expect (image-shape? (rectangle 4 5 "solid" "white")) "tall")
(check-expect (image-shape? (rectangle 8 5 "solid" "white")) "wide")
(check-expect (image-shape? (rectangle 5 5 "solid" "white")) "square")


#;(define (image-shape? img)  -> Template
  (if (... img)
      (... img)
      (... img)))

(define (image-shape? img)
  (if (> (image-height img) (image-width img))
      "tall"
       (if (> (image-width img) (image-height img))
            "wide"
            "square")))
*** It supposed to use the 3 ways in parallel however it doesn't work as well.

The right way to design this function is use a COND (multi-armed conditional -- It can have any number of cases at the same level)

(require 2htdp/image)

;;Design a function that consumes an image and determines if the image is tall, wide or a square.

;; Image ->  String
;; Produce the shape of the image, on of "tall", "wide" or "square"

;;(define (image-shape? ima) " ")    -> Stub

(check-expect (image-shape? (rectangle 4 5 "solid" "white")) "tall")
(check-expect (image-shape? (rectangle 8 5 "solid" "white")) "wide")
(check-expect (image-shape? (rectangle 5 5 "solid" "white")) "square")


#;(define (image-shape? img)  -> Template
  (if (... img)
      (... img)
      (... img)))
#;
(define (image-shape? img)
  (if (> (image-height img) (image-width img))
      "tall"
       (if (> (image-width img) (image-height img))
            "wide"
            "square")))
#;
(define (image-shape? img)
    (cond [Q A]
          [Q A]
          [Q A]))
          
(define (image-shape? img)
    (cond [(> (image-height img) (image-width img) "tall"]
          [(> (image-width img) (image-height img)) "wide"]
          [else "square"]))
          
For forming a COND expression use the following syntax:
   
(cond [<Question1> <Answers1>]
      [<Question2> <Answers2>]
      [<Question3> <Answers3>])   
In the last question could be replaced by else.

To evaluate a cond expression:
    -If there are no question/answer pairs, signal error.
    -If the first question is not a value, evaluate it and replace it with its value. That is, replace the entire cond with a new cond  in which the first question has been replaced by its value.
    -If the first question is true or else, replace the entire cond expression with the answer.
    -If the first question is false drop the first question/answer pair, that is, replace the cond with a new cond that does not have the first question/answer pair.
    -Since the first question is not, true or false, signal an error.
    
    
    (cond [(> 1 2) "bigger"]
          [(= 1 2) "equal"]
          [(< 1 2) "smaller"]
          
    (cond [false "bigger"]
          [(= 1 2) "equal"]
          [(< 1 2) "smaller"]     
    
    (cond [(= 1 2) "equal"]
          [(< 1 2) "smaller"] 
    
    (cond [false "equal"]
          [(< 1 2) "smaller"]
    
    (cond [(< 1 2) "smaller"]
    (cond [true "smaller"]
    "smaller
  
The data defitions:

The problem domain is information that were be represented as data into the program. We transfer that informaton to be represented and viceverse.
Data definitions tells us how to represente the data with the information in the problem domain.

Data definitions describes:
   -How to form data of a new type
   -How to represent information as data
   -How to interpret data as information
   -Template for operating on data

Data definitions simplifies function:
   -Restricts data consumed
   -Restricts data produced
   -Helps generate examples
   -Provides template


Atomic Non-Distinct Data Definitions:

Problem:

Imagine that you are desingning a program that, among other things, has information about the name of cities in its problem domain.
Desing a data definitions to represent the name of the city.


A data definitions consists of four or five parts:
    1. A possible structure definition
    2. A type comment that defines a new type name and describes how to form data.
    3. An interpretation that describes the correspondence between information and data.
    4. One or more examples of the data.
    5. A template for a 1 argument function operating on data of this type.


